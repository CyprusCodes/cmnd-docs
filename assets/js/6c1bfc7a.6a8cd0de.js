"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2530],{8314:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var t=r(4848),a=r(8453),o=r(1470),s=r(9365);r(1432);const i={id:"memory",title:"Memory Management",description:"Learn how to store and manage conversation context in your CMND chatbot.",sidebar_position:3},l="Memory Management",c={id:"cmnd-react-sdk/configuration-options/memory",title:"Memory Management",description:"Learn how to store and manage conversation context in your CMND chatbot.",source:"@site/docs/cmnd-react-sdk/configuration-options/memory.md",sourceDirName:"cmnd-react-sdk/configuration-options",slug:"/cmnd-react-sdk/configuration-options/memory",permalink:"/docs/cmnd-react-sdk/configuration-options/memory",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"memory",title:"Memory Management",description:"Learn how to store and manage conversation context in your CMND chatbot.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Custom Styles",permalink:"/docs/cmnd-react-sdk/configuration-options/custom-styles"},next:{title:"UI Tools",permalink:"/docs/cmnd-react-sdk/configuration-options/ui-tools"}},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Memory Features",id:"memory-features",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"memory-management",children:"Memory Management"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["The CMND React SDK provides memory management capabilities that allow you to store and manage conversation context through the ",(0,t.jsx)(n.code,{children:"initialMemory"})," prop and memory management functions."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This guide contains information on how to initialize memory values, update conversation memory during runtime, and remove specific memory keys from active conversations."})}),"\n",(0,t.jsx)(n.h2,{id:"memory-features",children:"Memory Features"}),"\n","\n",(0,t.jsxs)(o.A,{groupId:"memory-operations",children:[(0,t.jsx)(s.A,{value:"initial",label:"Initial Memory Setup",default:!0,children:(0,t.jsxs)("div",{className:"card",children:[(0,t.jsx)("div",{className:"card__header",children:(0,t.jsx)("h3",{children:"Initializing Memory"})}),(0,t.jsxs)("div",{className:"card__body",children:[(0,t.jsxs)("p",{children:["You can initialize the chat with predefined memory values using the ",(0,t.jsx)("code",{children:"initialMemory"})," prop when setting up the ChatProvider:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="InitialMemorySetup.tsx" showLineNumbers',children:'<ChatProvider\n  baseUrl="<your-cmnd-api-base-url>"\n  chatbotId={"<your-chatbot-id>"}\n  organizationId={"<your-organization-id>"}\n  initialMemory={{\n    accessToken: "your-access-token",\n    date: "2022-01-01",\n    // Add any other initial memory key-value pairs\n  }}\n/>\n'})})]})]})}),(0,t.jsx)(s.A,{value:"set",label:"Set Memory",children:(0,t.jsxs)("div",{className:"card",children:[(0,t.jsx)("div",{className:"card__header",children:(0,t.jsx)("h3",{children:"Setting Memory Values"})}),(0,t.jsxs)("div",{className:"card__body",children:[(0,t.jsxs)("p",{children:["The ",(0,t.jsx)("code",{children:"setCurrentConversationMemory"})," function allows you to set or update memory values during an active conversation:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="SetMemoryExample.tsx" showLineNumbers',children:'import { setCurrentConversationMemory } from "@cmnd-ai/chatbot-react";\n\n// Set single or multiple memory values\nawait setCurrentConversationMemory({\n  name: "John Doe",\n  email: "jon@doe.com",\n  phone: "1234567890",\n});\n'})}),(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"setCurrentConversationMemory"})," is only available during an active chat thread."]})})]})]})}),(0,t.jsx)(s.A,{value:"delete",label:"Delete Memory",children:(0,t.jsxs)("div",{className:"card",children:[(0,t.jsx)("div",{className:"card__header",children:(0,t.jsx)("h3",{children:"Deleting Memory Values"})}),(0,t.jsxs)("div",{className:"card__body",children:[(0,t.jsxs)("p",{children:["The ",(0,t.jsx)("code",{children:"deleteCurrentConversationMemory"})," function enables you to remove specific memory keys from the current conversation:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="DeleteMemoryExample.tsx" showLineNumbers',children:'import { deleteCurrentConversationMemory } from "@cmnd-ai/chatbot-react";\n\n// Delete a specific memory key\nawait deleteCurrentConversationMemory("name");\n'})}),(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("code",{children:"deleteCurrentConversationMemory"})," is only available during an active chat thread."]})})]})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsxs)("div",{className:"card",children:[(0,t.jsx)("div",{className:"card__header",children:(0,t.jsx)("h3",{children:"Complete Implementation Example"})}),(0,t.jsxs)("div",{className:"card__body",children:[(0,t.jsx)("p",{children:"Here's a complete example showing how to implement memory management in your chat application:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="ChatApp.tsx" showLineNumbers',children:'import { ChatProvider } from "@cmnd-ai/chatbot-react";\nimport {\n  setCurrentConversationMemory,\n  deleteCurrentConversationMemory,\n} from "@cmnd-ai/chatbot-react";\n\nfunction ChatApp() {\n  const handleSetMemory = async () => {\n    try {\n      const response = await setCurrentConversationMemory({\n        name: "John Doe",\n        email: "jon@doe.com",\n        phone: "1234567890",\n      });\n      console.log("Memory Set:", response);\n    } catch (error) {\n      console.error("Error setting memory:", error);\n    }\n  };\n\n  const handleDeleteMemory = async () => {\n    try {\n      const response = await deleteCurrentConversationMemory("name");\n      console.log("Memory Deleted:", response);\n    } catch (error) {\n      console.error("Error deleting memory:", error);\n    }\n  };\n\n  return (\n    <>\n      <ChatProvider\n        baseUrl="<your-cmnd-api-base-url>"\n        chatbotId={"<your-chatbot-id>"}\n        organizationId={"<your-organization-id>"}\n        initialMemory={{\n          accessToken: "your-access-token",\n          date: "2022-01-01",\n        }}\n      />\n      <Button onClick={handleSetMemory}>Set Memory</Button>\n      <Button onClick={handleDeleteMemory}>Delete Memory</Button>\n    </>\n  );\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(o.A,{groupId:"best-practices",children:[(0,t.jsx)(s.A,{value:"security",label:"Security Considerations",default:!0,children:(0,t.jsx)("div",{className:"card",children:(0,t.jsx)("div",{className:"card__body",children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Don't store anything sensitive in memory, as it's not meant for secure storage."}),(0,t.jsx)("li",{children:"Regularly clean up unnecessary memory entries."})]})})})}),(0,t.jsx)(s.A,{value:"performance",label:"Performance Optimization",children:(0,t.jsx)("div",{className:"card",children:(0,t.jsx)("div",{className:"card__body",children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Only store essential information in memory."}),(0,t.jsx)("li",{children:"Clear outdated memory values when no longer needed."}),(0,t.jsx)("li",{children:"Avoid storing large data structures in memory."})]})})})}),(0,t.jsx)(s.A,{value:"error",label:"Error Handling",children:(0,t.jsx)("div",{className:"card",children:(0,t.jsx)("div",{className:"card__body",children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Implement proper error handling for memory operations."}),(0,t.jsx)("li",{children:"Validate memory values before storage."}),(0,t.jsx)("li",{children:"Provide feedback for failed memory operations."})]})})})})]}),"\n",(0,t.jsx)(n.admonition,{title:"Important Considerations",type:"tip",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Memory values persist only for the current conversation session."}),"\n",(0,t.jsx)(n.li,{children:"Memory operations are asynchronous and return Promises."}),"\n",(0,t.jsx)(n.li,{children:"Ensure proper error handling for memory management functions."}),"\n",(0,t.jsx)(n.li,{children:"Memory keys should be strings and values should be serializable."}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Memory Persistence Strategies"})}),(0,t.jsxs)("div",{children:[(0,t.jsx)(n.p,{children:"When building applications that require memory persistence across sessions, consider implementing a custom storage solution:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="PersistentMemory.tsx" showLineNumbers',children:'import { useEffect } from "react";\nimport {\n  ChatProvider,\n  setCurrentConversationMemory,\n} from "@cmnd-ai/chatbot-react";\n\nfunction PersistentChatApp() {\n  // Load saved memory from localStorage when component mounts\n  useEffect(() => {\n    const loadSavedMemory = async () => {\n      try {\n        const savedMemory = localStorage.getItem("chatMemory");\n\n        if (savedMemory) {\n          const parsedMemory = JSON.parse(savedMemory);\n          await setCurrentConversationMemory(parsedMemory);\n          console.log("Restored memory from local storage");\n        }\n      } catch (error) {\n        console.error("Error restoring memory:", error);\n      }\n    };\n\n    // Small delay to ensure chat thread is established\n    const timer = setTimeout(loadSavedMemory, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Save memory handler example\n  const saveMemoryToStorage = async (memoryObject) => {\n    try {\n      // First update the conversation memory\n      await setCurrentConversationMemory(memoryObject);\n\n      // Then save to localStorage\n      localStorage.setItem("chatMemory", JSON.stringify(memoryObject));\n      console.log("Memory saved to local storage");\n    } catch (error) {\n      console.error("Error saving memory:", error);\n    }\n  };\n\n  return (\n    <>\n      <ChatProvider\n        baseUrl="<your-cmnd-api-base-url>"\n        chatbotId={"<your-chatbot-id>"}\n        organizationId={"<your-organization-id>"}\n        initialMemory={{\n          // Initial values that will be overridden by localStorage if available\n          lastVisit: new Date().toISOString(),\n        }}\n      />\n      {/* Application UI */}\n    </>\n  );\n}\n'})}),(0,t.jsx)(n.p,{children:"This approach allows you to maintain conversation context across browser sessions or page refreshes."})]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>s});r(6540);var t=r(4164);const a={tabItem:"tabItem_Ymn6"};var o=r(4848);function s(e){let{children:n,hidden:r,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,s),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>M});var t=r(6540),a=r(4164),o=r(3104),s=r(6347),i=r(205),l=r(7485),c=r(1682),d=r(679);function m(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const a=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function y(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,o=u(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,m]=p({queryString:r,groupId:a}),[y,v]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,d.Dv)(r);return[a,(0,t.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:a}),g=(()=>{const e=c??y;return h({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),v(e)}),[m,v,o]),tabValues:o}}var v=r(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(4848);function x(e){let{className:n,block:r,selectedValue:t,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),a=i[r].value;a!==t&&(c(n),s(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},n),children:i.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:m,onClick:d,...o,className:(0,a.A)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function f(e){let{lazy:n,children:r,selectedValue:o}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function j(e){const n=y(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,b.jsx)(x,{...n,...e}),(0,b.jsx)(f,{...n,...e})]})}function M(e){const n=(0,v.A)();return(0,b.jsx)(j,{...e,children:m(e.children)},String(n))}}}]);