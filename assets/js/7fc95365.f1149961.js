"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4347],{8686:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(4848),r=t(8453);const o={id:"memory",title:"Memory Management",description:"Store and manage persistent data across chat sessions",sidebar_position:2},a="Memory Management",s={id:"cmnd-embed-widget/configuration-options/memory",title:"Memory Management",description:"Store and manage persistent data across chat sessions",source:"@site/docs/cmnd-embed-widget/configuration-options/memory.md",sourceDirName:"cmnd-embed-widget/configuration-options",slug:"/cmnd-embed-widget/configuration-options/memory",permalink:"/docs/cmnd-embed-widget/configuration-options/memory",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"memory",title:"Memory Management",description:"Store and manage persistent data across chat sessions",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Configuration Options",permalink:"/docs/category/configuration-options-1"},next:{title:"Styles & Configurations",permalink:"/docs/cmnd-embed-widget/configuration-options/styles-and-configurations"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Working with Memory",id:"working-with-memory",level:2},{value:"Initial Memory",id:"initial-memory",level:2},{value:"Updating Memory During Conversation",id:"updating-memory-during-conversation",level:2},{value:"Removing Memory Values",id:"removing-memory-values",level:2},{value:"Sample Implememntation",id:"sample-implememntation",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"memory-management",children:"Memory Management"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The CMND Memory system allows your chatbot to maintain contextual information and user data across multiple chat sessions. This enables personalized interactions and continuity in conversations even after the user refreshes the page or returns later."}),"\n",(0,i.jsx)(n.h2,{id:"working-with-memory",children:"Working with Memory"}),"\n",(0,i.jsx)(n.p,{children:"CMND provides three primary methods for managing conversation memory:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Available When"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"initialMemory"})}),(0,i.jsx)(n.td,{children:"Set initial memory during widget initialization"}),(0,i.jsx)(n.td,{children:"Before chat begins"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"setCurrentConversationMemory"})}),(0,i.jsx)(n.td,{children:"Update or add memory values"}),(0,i.jsx)(n.td,{children:"During active chat"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteCurrentConversationMemory"})}),(0,i.jsx)(n.td,{children:"Remove specific memory values"}),(0,i.jsx)(n.td,{children:"During active chat"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"initial-memory",children:"Initial Memory"}),"\n",(0,i.jsxs)(n.p,{children:["When initializing the CMND Chat widget, you can provide initial memory values using the ",(0,i.jsx)(n.code,{children:"initialMemory"})," command. These values will be available immediately when the chat session begins."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="JavaScript" showLineNumbers',children:'window\n  .cmndChat("init", {\n    chatbot_id: "YOUR_CHATBOT_ID",\n    organization_id: "YOUR_ORGANIZATION_ID",\n    initialMemory: {\n      email: "user@example.com",\n      name: "John Doe",\n      preferredLanguage: "English",\n    },\n  })\n  .then((initOptions) => {\n    console.log("Widget initialized with memory:", initOptions);\n  })\n  .catch((error) => {\n    console.error("Initialization failed:", error);\n  });\n'})}),"\n",(0,i.jsx)(n.h2,{id:"updating-memory-during-conversation",children:"Updating Memory During Conversation"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"setCurrentConversationMemory"})," to store or update key-value pairs in memory. This method returns a Promise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="JavaScript" showLineNumbers',children:'window\n  .cmndChat("setCurrentConversationMemory", {\n    memory: {\n      favoriteColor: "blue",\n      location: "New York",\n      lastVisit: new Date().toISOString(),\n    },\n  })\n  .then((result) => {\n    console.log("Memory updated successfully:", result);\n  })\n  .catch((error) => {\n    console.error("Failed to update memory:", error);\n  });\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setCurrentConversationMemory"})," method only works when there is an active chat thread. Attempts to update memory before the user starts a conversation will fail."]})}),"\n",(0,i.jsx)(n.h2,{id:"removing-memory-values",children:"Removing Memory Values"}),"\n",(0,i.jsxs)(n.p,{children:["To delete specific memory keys from the current conversation, use ",(0,i.jsx)(n.code,{children:"deleteCurrentConversationMemory"}),". This method returns a Promise:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="JavaScript" showLineNumbers',children:'window\n  .cmndChat("deleteCurrentConversationMemory", {\n    memoryKeyToDelete: "location",\n  })\n  .then((result) => {\n    console.log("Memory value deleted:", result);\n  })\n  .catch((error) => {\n    console.error("Failed to delete memory value:", error);\n  });\n'})}),"\n",(0,i.jsx)(n.p,{children:"To delete multiple keys at once, use an array:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="JavaScript" showLineNumbers',children:'window\n  .cmndChat("deleteCurrentConversationMemory", {\n    memoryKeyToDelete: ["location", "lastVisit"],\n  })\n  .then((result) => {\n    console.log("Multiple memory values deleted:", result);\n  })\n  .catch((error) => {\n    console.error("Failed to delete memory values:", error);\n  });\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"setCurrentConversationMemory"}),", the delete method also requires an active chat session."]})}),"\n",(0,i.jsx)(n.h2,{id:"sample-implememntation",children:"Sample Implememntation"}),"\n",(0,i.jsx)(n.p,{children:"Here's a practical example showing how to initialize the CMND Chat widget with user information, set and delete the information:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="HTML" showLineNumbers',children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>CMND Chat with Initial Memory</title>\n    <script src="https://embed.cmnd.ai/widget.js"><\/script>\n  </head>\n  <body>\n    <script>\n      // Initialize CMND widget with initial memory\n      window\n        .cmndChat("init", {\n          chatbot_id: "YOUR_CHATBOT_ID",\n          organization_id: "YOUR_ORGANIZATION_ID",\n          initialMemory: {\n            email: "user@example.com",\n            name: "John Smith",\n          },\n        })\n        .then((initOptions) => {\n          console.log("Chat initialized with user data", initOptions);\n        })\n        .catch((err) => {\n          console.error("Failed to initialize chat", err);\n        });\n\n      // Example of updating memory later\n      function updateUserEmail() {\n        window\n          .cmndChat("setCurrentConversationMemory", {\n            memory: {\n              email: "newemail@example.com",\n            },\n          })\n          .then(() => console.log("Email updated"))\n          .catch((err) => console.error("Error updating email:", err));\n      }\n\n      // Example of removing user data\n      function removeUserData() {\n        window\n          .cmndChat("deleteCurrentConversationMemory", {\n            memoryKeyToDelete: "email",\n          })\n          .then(() => console.log("Email removed"))\n          .catch((err) => console.error("Error removing email:", err));\n      }\n    <\/script>\n\n    \x3c!-- Optional: Buttons to demonstrate memory updates --\x3e\n    <button onclick="updateUserEmail()">Update Email</button>\n    <button onclick="removeUserData()">Remove Email</button>\n  </body>\n</html>\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);