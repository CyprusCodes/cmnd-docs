"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8664],{8118:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=t(4848),o=t(8453);const r={sidebar_position:5},a="Memory",s={id:"Embed Widget/memory",title:"Memory",description:"Overview",source:"@site/docs/Embed Widget/memory.md",sourceDirName:"Embed Widget",slug:"/Embed Widget/memory",permalink:"/docs/Embed Widget/memory",draft:!1,unlisted:!1,editUrl:"https://github.com/CyprusCodes/cmnd-docs/tree/main/docs/Embed Widget/memory.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/Embed Widget/configuration"},next:{title:"UI Tools",permalink:"/docs/Embed Widget/ui_tools"}},l={},m=[{value:"Overview",id:"overview",level:3},{value:"Initial Memory",id:"initial-memory",level:3},{value:"Setting Memory",id:"setting-memory",level:3},{value:"Deleting Memory",id:"deleting-memory",level:3},{value:"Sample Implementation",id:"sample-implementation",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"memory",children:"Memory"})}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"CMND Memory"})," feature enables persistent data storage within the widget, allowing you to maintain user preferences, details, and contextual information across chat sessions."]}),"\n",(0,i.jsx)(n.h3,{id:"initial-memory",children:"Initial Memory"}),"\n",(0,i.jsxs)(n.p,{children:["When initializing the CMND Chat widget, you can provide initial memory values using the ",(0,i.jsx)(n.code,{children:"initialMemory"})," command. These values will be available immediately when the chat session begins."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//script.js\nwindow\n  .cmndChat("init", {\n    chatbot_id: "YOUR_CHATBOT_ID",\n    organization_id: "YOUR_ORGANIZATION_ID",\n    initialMemory: {\n      email: "user@example.com",\n      name: "John Doe",\n    },\n  })\n  .then((initOptions) => {\n    console.log("Initialization complete", initOptions);\n  })\n  .catch((err) => {\n    console.error("Initialization failed", err);\n  });\n'})}),"\n",(0,i.jsx)(n.h3,{id:"setting-memory",children:"Setting Memory"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"setCurrentConversationMemory"})," to store or update key-value pairs in memory. This method returns a Promise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//script.js\nwindow\n  .cmndChat("setCurrentConversationMemory", {\n    memory: {\n      favouriteColor: "red",\n      age: 25,\n    },\n  })\n  .then((memoryOptions) => {\n    console.log("Memory set successfully", memoryOptions);\n  })\n  .catch((err) => {\n    console.log("Failed to set memory", err);\n  });\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setCurrentConversationMemory"})," method is only available when a user is interacting with an active chat thread."]})}),"\n",(0,i.jsx)(n.h3,{id:"deleting-memory",children:"Deleting Memory"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"deleteCurrentConversationMemory"})," to remove specific keys from memory. This method returns a Promise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//script.js\nwindow\n  .cmndChat("deleteCurrentConversationMemory", {\n    memoryKeyToDelete: "email",\n  })\n  .then((memoryOptions) => {\n    console.log("Memory deleted successfully", memoryOptions);\n  })\n  .catch((err) => {\n    console.log("Failed to delete memory", err);\n  });\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"deleteCurrentConversationMemory"})," method is only available when a user is interacting with an active chat thread."]})}),"\n",(0,i.jsx)(n.h3,{id:"sample-implementation",children:"Sample Implementation"}),"\n",(0,i.jsx)(n.p,{children:"Here's a practical example showing how to initialize the CMND Chat widget with user information, set and delete the information."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>CMND Chat with Initial Memory</title>\n    <script src="https://embed.cmnd.ai/widget.js"><\/script>\n  </head>\n  <body>\n    <script>\n      // Initialize CMND widget with initial memory\n      window\n        .cmndChat("init", {\n          chatbot_id: "YOUR_CHATBOT_ID",\n          organization_id: "YOUR_ORGANIZATION_ID",\n          initialMemory: {\n            email: "user@example.com",\n            name: "John Smith",\n          },\n        })\n        .then((initOptions) => {\n          console.log("Chat initialized with user data", initOptions);\n        })\n        .catch((err) => {\n          console.error("Failed to initialize chat", err);\n        });\n\n      // Example of updating memory later\n      function updateUserEmail() {\n        window\n          .cmndChat("setCurrentConversationMemory", {\n            memory: {\n              email: "newemail@example.com",\n            },\n          })\n          .then(() => console.log("Email updated"))\n          .catch((err) => console.error("Error updating email:", err));\n      }\n\n      // Example of removing user data\n      function removeUserData() {\n        window\n          .cmndChat("deleteCurrentConversationMemory", {\n            memoryKeyToDelete: "email",\n          })\n          .then(() => console.log("Email removed"))\n          .catch((err) => console.error("Error removing email:", err));\n      }\n    <\/script>\n\n    \x3c!-- Optional: Buttons to demonstrate memory updates --\x3e\n    <button onclick="updateUserEmail()">Update Email</button>\n    <button onclick="removeUserData()">Remove Email</button>\n  </body>\n</html>\n'})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);