"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2320],{7891:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=n(4848),s=n(8453),a=n(1470),l=n(9365);const o={id:"custom-styles",title:"Custom Styles",description:"Customize the appearance of your CMND chatbot using the customStyles prop.",sidebar_position:2},i="Custom Styles",c={id:"cmnd-react-sdk/configuration-options/custom-styles",title:"Custom Styles",description:"Customize the appearance of your CMND chatbot using the customStyles prop.",source:"@site/docs/cmnd-react-sdk/configuration-options/custom_styles.md",sourceDirName:"cmnd-react-sdk/configuration-options",slug:"/cmnd-react-sdk/configuration-options/custom-styles",permalink:"/docs/cmnd-react-sdk/configuration-options/custom-styles",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"custom-styles",title:"Custom Styles",description:"Customize the appearance of your CMND chatbot using the customStyles prop.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Chat Components",permalink:"/docs/cmnd-react-sdk/configuration-options/chat-components"},next:{title:"Memory Management",permalink:"/docs/cmnd-react-sdk/configuration-options/memory"}},d={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Available Custom Styles",id:"available-custom-styles",level:2},{value:"Usage",id:"usage",level:2},{value:"Interactive Style Editor",id:"interactive-style-editor",level:2}];function h(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"custom-styles",children:"Custom Styles"})}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:["The CMND React SDK allows you to customize the CSS styles of the chat interface using the ",(0,r.jsx)(t.code,{children:"customStyles"})," prop. This provides a flexible way to adjust the appearance of various chat elements without needing to create custom components."]}),"\n",(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__header",children:(0,r.jsx)("h3",{children:"Benefits of Custom Styles"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsxs)("p",{children:["Using ",(0,r.jsx)("code",{children:"customStyles"})," provides several advantages:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Ease of Use:"})," No need to create separate components for styling."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Consistency:"})," Ensures uniform design across different chat elements."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Flexibility:"})," Quickly adjust styles to match different themes or branding guidelines."]})]}),(0,r.jsxs)("p",{children:["With ",(0,r.jsx)("code",{children:"customStyles"}),", you can easily personalize the chat experience while keeping implementation simple and maintainable."]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"available-custom-styles",children:"Available Custom Styles"}),"\n","\n",(0,r.jsx)(t.p,{children:"The following style properties are available for customization:"}),"\n",(0,r.jsxs)(a.A,{groupId:"style-elements",children:[(0,r.jsx)(l.A,{value:"avatar",label:"Avatar",default:!0,children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__header",children:(0,r.jsx)("h3",{children:"Chat Avatar"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"chatAvatarStyle"}),": Defines the appearance of the chatbot's avatar, such as size, shape, and border radius."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-css",metastring:'title="Avatar Style Example" showLineNumbers',children:'chatAvatarStyle: {\n  borderRadius: "50%",\n  width: "40px",\n  height: "40px",\n}\n'})})]})]})}),(0,r.jsx)(l.A,{value:"input",label:"Input Field",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__header",children:(0,r.jsx)("h3",{children:"Input Field"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"inputStyle"}),": Controls the styling of the text input field, including padding, border, and background color."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-css",metastring:'title="Input Style Example" showLineNumbers',children:'inputStyle: {\n  border: "1px solid #ccc",\n  padding: "10px",\n  borderRadius: "5px",\n}\n'})})]})]})}),(0,r.jsx)(l.A,{value:"button",label:"Send Button",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__header",children:(0,r.jsx)("h3",{children:"Send Button"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"sendButtonStyle"}),": Styles the send button, including its background color, text color, padding, and border radius."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-css",metastring:'title="Send Button Style Example" showLineNumbers',children:'sendButtonStyle: {\n  backgroundColor: "#007bff",\n  color: "white",\n  padding: "10px 15px",\n  borderRadius: "5px",\n}\n'})})]})]})}),(0,r.jsx)(l.A,{value:"bubbles",label:"Chat Bubbles",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__header",children:(0,r.jsx)("h3",{children:"Chat Bubbles"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"chatbubbleStyle"}),": Applies general styles to both user and bot chat bubbles."]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"botChatbubbleStyle"}),": Specifically customizes the appearance of the chatbot's messages."]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"userChatbubbleStyle"}),": Defines the look of user-sent messages."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-css",metastring:'title="Chat Bubble Styles Example" showLineNumbers',children:'chatbubbleStyle: {\n  padding: "10px",\n  borderRadius: "10px",\n},\nbotChatbubbleStyle: {\n  backgroundColor: "#e0e0e0",\n},\nuserChatbubbleStyle: {\n  backgroundColor: "#007bff",\n  color: "white",\n}\n'})}),(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"chatbubbleStyle"})," overrides both ",(0,r.jsx)(t.code,{children:"botChatbubbleStyle"})," and ",(0,r.jsx)(t.code,{children:"userChatbubbleStyle"})]})})]})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["To apply custom styles, pass the ",(0,r.jsx)(t.code,{children:"customStyles"})," prop when initializing the chat component:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="App.tsx" showLineNumbers',children:'import { ChatProvider } from "@cmnd-ai/chatbot-react";\n\nfunction App() {\n  return (\n    <ChatProvider\n      baseUrl="<your-cmnd-api-base-url>"\n      chatbotId={"<your-chatbot-id>"}\n      organizationId={"<your-organization-id>"}\n      customStyles={{\n        chatAvatarStyle: {\n          borderRadius: "50%",\n          width: "40px",\n          height: "40px",\n        },\n        inputStyle: {\n          border: "1px solid #ccc",\n          padding: "10px",\n          borderRadius: "5px",\n        },\n        sendButtonStyle: {\n          backgroundColor: "#007bff",\n          color: "white",\n          padding: "10px 15px",\n          borderRadius: "5px",\n        },\n        chatbubbleStyle: {\n          backgroundColor: "#f1f1f1",\n          padding: "10px",\n          borderRadius: "10px",\n        },\n        botChatbubbleStyle: {\n          backgroundColor: "#e0e0e0",\n        },\n        userChatbubbleStyle: {\n          backgroundColor: "#007bff",\n          color: "white",\n        },\n      }}\n    />\n  );\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{title:"Best Practices",type:"tip",children:(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Accessibility: Use meaningful color contrasts for better readability."}),"\n",(0,r.jsx)(t.li,{children:"Readability: Maintain sufficient padding and margins for comfortable reading."}),"\n",(0,r.jsx)(t.li,{children:"Responsiveness: Ensure styles are responsive for different screen sizes."}),"\n"]})}),"\n",(0,r.jsx)(t.h2,{id:"interactive-style-editor",children:"Interactive Style Editor"}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Try Different Style Combinations"})}),(0,r.jsxs)("div",{children:[(0,r.jsx)(t.p,{children:"The code below demonstrates how to implement a dynamic style editor in your application:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="StyleEditor.tsx" showLineNumbers',children:'import React, { useState } from "react";\nimport { ChatProvider, CmndChatBot } from "@cmnd-ai/chatbot-react";\n\nconst StyleEditor = () => {\n  const [avatarBorderRadius, setAvatarBorderRadius] = useState("50%");\n  const [bubbleBg, setBubbleBg] = useState("#e0e0e0");\n  const [userBubbleBg, setUserBubbleBg] = useState("#007bff");\n\n  return (\n    <div className="style-editor">\n      <div className="controls">\n        <div>\n          <label>Avatar Border Radius:</label>\n          <select\n            value={avatarBorderRadius}\n            onChange={(e) => setAvatarBorderRadius(e.target.value)}\n          >\n            <option value="50%">Circle (50%)</option>\n            <option value="10%">Rounded (10%)</option>\n            <option value="0">Square (0)</option>\n          </select>\n        </div>\n\n        <div>\n          <label>Bot Bubble Color:</label>\n          <input\n            type="color"\n            value={bubbleBg}\n            onChange={(e) => setBubbleBg(e.target.value)}\n          />\n        </div>\n\n        <div>\n          <label>User Bubble Color:</label>\n          <input\n            type="color"\n            value={userBubbleBg}\n            onChange={(e) => setUserBubbleBg(e.target.value)}\n          />\n        </div>\n      </div>\n\n      <ChatProvider\n        baseUrl="<your-cmnd-api-base-url>"\n        chatbotId="<your-chatbot-id>"\n        organizationId="<your-organization-id>"\n        customStyles={{\n          chatAvatarStyle: {\n            borderRadius: avatarBorderRadius,\n            width: "40px",\n            height: "40px",\n          },\n          botChatbubbleStyle: {\n            backgroundColor: bubbleBg,\n          },\n          userChatbubbleStyle: {\n            backgroundColor: userBubbleBg,\n            color: "white",\n          },\n        }}\n      >\n        <CmndChatBot />\n      </ChatProvider>\n    </div>\n  );\n};\n\nexport default StyleEditor;\n'})}),(0,r.jsx)(t.p,{children:"This example creates a simple interface to dynamically adjust styles, allowing you to preview changes in real-time."})]})]})]})}function b(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>l});n(6540);var r=n(4164);const s={tabItem:"tabItem_Ymn6"};var a=n(4848);function l(e){let{children:t,hidden:n,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,l),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>S});var r=n(6540),s=n(4164),a=n(3104),l=n(6347),o=n(205),i=n(7485),c=n(1682),d=n(679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function b(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const s=(0,l.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})}),[a,s])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,a=h(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,u]=p({queryString:n,groupId:s}),[m,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,a]=(0,d.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:s}),y=(()=>{const e=c??m;return b({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{y&&i(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),x(e)}),[u,x,a]),tabValues:a}}var x=n(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function g(e){let{className:t,block:n,selectedValue:r,selectValue:l,tabValues:o}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const t=e.currentTarget,n=i.indexOf(t),s=o[n].value;s!==r&&(c(t),l(s))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>i.push(e),onKeyDown:u,onClick:d,...a,className:(0,s.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function j(e){const t=m(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",y.tabList),children:[(0,f.jsx)(g,{...t,...e}),(0,f.jsx)(v,{...t,...e})]})}function S(e){const t=(0,x.A)();return(0,f.jsx)(j,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(6540);const s={},a=r.createContext(s);function l(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);