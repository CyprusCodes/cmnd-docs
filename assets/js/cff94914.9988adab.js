"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1777],{6084:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>r});var i=t(4848),o=t(8453);const s={sidebar_position:2},a="Chat Components",l={id:"CMND React sdk/chat_components",title:"Chat Components",description:"Introduction",source:"@site/docs/CMND React sdk/chat_components.md",sourceDirName:"CMND React sdk",slug:"/CMND React sdk/chat_components",permalink:"/docs/CMND React sdk/chat_components",draft:!1,unlisted:!1,editUrl:"https://github.com/CyprusCodes/cmnd-docs/tree/main/docs/CMND React sdk/chat_components.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/CMND React sdk/installation"},next:{title:"Custom Styles",permalink:"/docs/CMND React sdk/custom_styles"}},d={},r=[{value:"Introduction",id:"introduction",level:2},{value:"Component Customization",id:"component-customization",level:2},{value:"Available Components",id:"available-components",level:3},{value:"InputField Component",id:"inputfield-component",level:4},{value:"SendButton Component",id:"sendbutton-component",level:4},{value:"Implementation",id:"implementation",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Component States",id:"component-states",level:2},{value:"TypeScript Support",id:"typescript-support",level:2},{value:"Examples",id:"examples",level:2},{value:"Material-UI Implementation",id:"material-ui-implementation",level:3},{value:"Tailwind CSS Implementation",id:"tailwind-css-implementation",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"chat-components",children:"Chat Components"})}),"\n",(0,i.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(e.p,{children:"The CMND React SDK provides customizable UI components that allow you to tailor your conversation view's appearance to match your application's theme. This feature is particularly valuable when integrating with existing UI libraries or maintaining consistent design systems."}),"\n",(0,i.jsx)(e.h2,{id:"component-customization",children:"Component Customization"}),"\n",(0,i.jsx)(e.h3,{id:"available-components",children:"Available Components"}),"\n",(0,i.jsx)(e.p,{children:"The SDK supports customization of the following components:"}),"\n",(0,i.jsx)(e.h4,{id:"inputfield-component",children:"InputField Component"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"InputField"})," component allows you to customize the appearance and behavior of the message input area.\nBelow is a type definition for the ",(0,i.jsx)(e.code,{children:"InputFieldProps"}),", the props can be imported."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"interface InputFieldProps {\n  /** Current input value */\n  input: string;\n\n  /** Function to update input value */\n  setInput: (input: string) => void;\n\n  /** Boolean indicating if message can be sent */\n  canSendMessage: boolean;\n\n  /** Function to handle message sending */\n  handleSendClick: () => void;\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// Usage example\nimport { InputFieldProps } from "@cmnd-ai/chatbot-react";\n\nconst CustomInputField = ({\n  input,\n  setInput,\n  canSendMessage,\n  handleSendClick,\n}: InputFieldProps) => {\n  return (\n    <div className="custom-input-container">\n      <input\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder="Type your message..."\n      />\n    </div>\n  );\n};\n'})}),"\n",(0,i.jsx)(e.h4,{id:"sendbutton-component",children:"SendButton Component"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"SendButton"})," component allows you to customize the appearance and behavior of the message send button.\nBelow is a type definition for the ",(0,i.jsx)(e.code,{children:"SendButtonProps"}),", the props can be imported."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"interface SendButtonProps {\n  /** Function to handle message sending */\n  handleSendClick: () => void;\n\n  /** Boolean indicating if message can be sent */\n  canSendMessage: boolean;\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// Usage example\nimport { SendButtonProps } from "@cmnd-ai/chatbot-react";\n\nconst CustomSendButton = ({\n  handleSendClick,\n  canSendMessage,\n}: SendButtonProps) => {\n  return (\n    <button\n      onClick={handleSendClick}\n      disabled={!canSendMessage}\n      className="custom-send-button"\n    >\n      Send\n    </button>\n  );\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(e.p,{children:"To use custom components, pass them as props when initializing the chat component:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import { ChatProvider } from "@cmnd/react-sdk";\n\nfunction App() {\n  return (\n    <ChatProvider\n      baseUrl="<your-cmnd-api-base-url>"\n      chatbotId={"<your-chatbot-id>"}\n      organizationId={"<your-organization-id>"}\n      Components={{\n        InputField: CustomInputField,\n        SendButton: CustomSendButton,\n      }}\n    />\n  );\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Maintain Accessibility"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Ensure custom components maintain ARIA attributes and keyboard navigation"}),"\n",(0,i.jsx)(e.li,{children:"Provide appropriate visual feedback for different states"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Error Handling"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Implement proper error states in custom components"}),"\n",(0,i.jsx)(e.li,{children:"Handle edge cases like empty messages or network issues"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Responsive Design"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Make components responsive to different screen sizes"}),"\n",(0,i.jsx)(e.li,{children:"Consider mobile-first design principles"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"component-states",children:"Component States"}),"\n",(0,i.jsx)(e.p,{children:"Each component should handle the following states:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Default"}),"\n",(0,i.jsx)(e.li,{children:"Hover"}),"\n",(0,i.jsx)(e.li,{children:"Active/Focus"}),"\n",(0,i.jsx)(e.li,{children:"Disabled"}),"\n",(0,i.jsx)(e.li,{children:"Error"}),"\n",(0,i.jsx)(e.li,{children:"Loading (if applicable)"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"typescript-support",children:"TypeScript Support"}),"\n",(0,i.jsx)(e.p,{children:"The SDK provides full TypeScript support for all component props and interfaces. This ensures type safety and better developer experience when implementing custom components."}),"\n",(0,i.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(e.h3,{id:"material-ui-implementation",children:"Material-UI Implementation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import {\n  ChatProvider,\n  InputFieldProps,\n  SendButtonProps,\n} from "@cmnd/react-sdk";\nimport { TextField, Button } from "@mui/material";\n\nconst MaterialInputField = ({\n  input,\n  setInput,\n  canSendMessage,\n}: InputFieldProps) => (\n  <TextField\n    value={input}\n    onChange={(e) => setInput(e.target.value)}\n    variant="outlined"\n    fullWidth\n    disabled={!canSendMessage}\n  />\n);\n\nconst MaterialSendButton = ({\n  handleSendClick,\n  canSendMessage,\n}: SendButtonProps) => (\n  <Button\n    onClick={handleSendClick}\n    disabled={!canSendMessage}\n    variant="contained"\n    color="primary"\n  >\n    Send\n  </Button>\n);\n\nfunction App() {\n  return (\n    <ChatProvider\n      baseUrl="<your-cmnd-api-base-url>"\n      chatbotId={"<your-chatbot-id>"}\n      organizationId={"<your-organization-id>"}\n      Components={{\n        InputField: CustomInputField,\n        SendButton: CustomSendButton,\n      }}\n    />\n  );\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"tailwind-css-implementation",children:"Tailwind CSS Implementation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import {\n  ChatProvider,\n  InputFieldProps,\n  SendButtonProps,\n} from "@cmnd/react-sdk";\n\nconst TailwindInputField = ({\n  input,\n  setInput,\n  canSendMessage,\n}: InputFieldProps) => (\n  <input\n    type="text"\n    value={input}\n    onChange={(e) => setInput(e.target.value)}\n    className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"\n    disabled={!canSendMessage}\n  />\n);\n\nconst TailwindSendButton = ({\n  handleSendClick,\n  canSendMessage,\n}: SendButtonProps) => (\n  <button\n    onClick={handleSendClick}\n    disabled={!canSendMessage}\n    className="px-4 py-2 bg-blue-500 text-white rounded-lg disabled:bg-gray-400"\n  >\n    Send\n  </button>\n);\n\nfunction App() {\n  return (\n    <ChatProvider\n      baseUrl="<your-cmnd-api-base-url>"\n      chatbotId={"<your-chatbot-id>"}\n      organizationId={"<your-organization-id>"}\n      Components={{\n        InputField: TailwindInputField,\n        SendButton: TailwindSendButton,\n      }}\n    />\n  );\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function a(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);